/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bouncingball;

import java.awt.CardLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;

/**
 *
 * @author ANTHONYDALEJORDAN
 */
public class MainMenu extends javax.swing.JFrame {

    private ImageIcon iconStartH;
    private ImageIcon iconStart;
    private ImageIcon iconExit;
    private ImageIcon iconExitH;
    private ImageIcon iconArrowLeft;
    private ImageIcon iconArrowLeftH;
    private ImageIcon iconArrowRight;
    private ImageIcon iconArrowRightH;
    private ImageIcon iconMinimize;
    private ImageIcon iconMinimizeH;
    
    private ImageIcon iconBall1;
    private ImageIcon iconBall2;
    private ImageIcon iconBall3;
    private ImageIcon iconBall4;
    
    private int dragXPos, dragYPos;

    public static int difficulty;
    public static int iconChoice;

    CardLayout cardLayout;
    GamePanel gamePanel;
    NameEntry nameEntry;

    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        initComponents();
        dragXPos = dragYPos = -1;
        difficulty = 0;

        //load
        loadImages();
        loadListeners();

        //Panels
        gamePanel = new GamePanel();
        cardLayout = (CardLayout) panelWindows.getLayout();
        panelWindows.add(gamePanel, "card2");
        
        nameEntry = new NameEntry(panelWindows);
        panelWindows.add(nameEntry, "card3");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dragPanel = new javax.swing.JPanel();
        dragBox = new javax.swing.JPanel();
        btnMinimize = new javax.swing.JLabel();
        btnExit = new javax.swing.JLabel();
        panelWindows = new javax.swing.JPanel();
        PanelStart = new javax.swing.JPanel();
        iconAvatar = new javax.swing.JLabel();
        lblHighScore = new javax.swing.JLabel();
        btnArrowLeft1 = new javax.swing.JLabel();
        btnArrowRight1 = new javax.swing.JLabel();
        btnArrowLeft = new javax.swing.JLabel();
        btnArrowRight = new javax.swing.JLabel();
        lblDifficulty = new javax.swing.JLabel();
        btnStart = new javax.swing.JLabel();
        background = new javax.swing.JLabel();
        lblHighScore1 = new javax.swing.JLabel();
        lblHighScoreDisplay = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(960, 596));
        setMinimumSize(new java.awt.Dimension(960, 596));
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(960, 596));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dragPanel.setBackground(new java.awt.Color(233, 233, 233));
        dragPanel.setMaximumSize(new java.awt.Dimension(960, 36));
        dragPanel.setMinimumSize(new java.awt.Dimension(960, 36));
        dragPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dragBox.setBackground(new java.awt.Color(51, 204, 0));
        dragBox.setOpaque(false);

        javax.swing.GroupLayout dragBoxLayout = new javax.swing.GroupLayout(dragBox);
        dragBox.setLayout(dragBoxLayout);
        dragBoxLayout.setHorizontalGroup(
            dragBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 840, Short.MAX_VALUE)
        );
        dragBoxLayout.setVerticalGroup(
            dragBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        dragPanel.add(dragBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 840, 40));

        btnMinimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconMinimize.png"))); // NOI18N
        btnMinimize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dragPanel.add(btnMinimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 0, -1, -1));

        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconExit.png"))); // NOI18N
        btnExit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dragPanel.add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 0, -1, -1));

        getContentPane().add(dragPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 960, 36));

        panelWindows.setMaximumSize(new java.awt.Dimension(960, 560));
        panelWindows.setLayout(new java.awt.CardLayout());

        PanelStart.setMaximumSize(new java.awt.Dimension(960, 560));
        PanelStart.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                PanelStartComponentShown(evt);
            }
        });
        PanelStart.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        iconAvatar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconAvatar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconBall1.png"))); // NOI18N
        iconAvatar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PanelStart.add(iconAvatar, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 430, 70, 80));

        lblHighScore.setFont(new java.awt.Font("Roboto Black", 0, 36)); // NOI18N
        lblHighScore.setForeground(new java.awt.Color(255, 255, 255));
        lblHighScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PanelStart.add(lblHighScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 960, 50));

        btnArrowLeft1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnArrowLeft1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconArrowLeft.png"))); // NOI18N
        btnArrowLeft1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PanelStart.add(btnArrowLeft1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 450, 40, 50));

        btnArrowRight1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnArrowRight1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconArrowRight.png"))); // NOI18N
        btnArrowRight1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PanelStart.add(btnArrowRight1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 450, 40, 50));

        btnArrowLeft.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnArrowLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconArrowLeft.png"))); // NOI18N
        btnArrowLeft.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PanelStart.add(btnArrowLeft, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 380, 40, 50));

        btnArrowRight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnArrowRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconArrowRight.png"))); // NOI18N
        btnArrowRight.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PanelStart.add(btnArrowRight, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 380, 40, 50));

        lblDifficulty.setFont(new java.awt.Font("Trench", 0, 36)); // NOI18N
        lblDifficulty.setForeground(new java.awt.Color(255, 204, 255));
        lblDifficulty.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDifficulty.setText("EASY");
        lblDifficulty.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        PanelStart.add(lblDifficulty, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 370, 120, 70));

        btnStart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconStart.png"))); // NOI18N
        btnStart.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PanelStart.add(btnStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 330, 260, 40));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/menuBg.png"))); // NOI18N
        PanelStart.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 960, 560));

        lblHighScore1.setFont(new java.awt.Font("Tw Cen MT", 0, 48)); // NOI18N
        lblHighScore1.setForeground(new java.awt.Color(102, 102, 102));
        lblHighScore1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PanelStart.add(lblHighScore1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 960, 50));

        lblHighScoreDisplay.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        lblHighScoreDisplay.setForeground(new java.awt.Color(102, 102, 102));
        lblHighScoreDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PanelStart.add(lblHighScoreDisplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 480, 960, 50));

        panelWindows.add(PanelStart, "card1");

        getContentPane().add(panelWindows, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 36, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void PanelStartComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_PanelStartComponentShown
        if (gamePanel.newHighScore) {
            lblHighScore.setText("NEW HIGH SCORE " + String.valueOf(gamePanel.highScore));
            lblHighScoreDisplay.setVisible(false);
            
        } else {
            lblHighScore.setText("Your score is " + String.valueOf(gamePanel.score) + "!");
            lblHighScoreDisplay.setVisible(true);
            lblHighScoreDisplay.setText("Highest score: " + String.valueOf(gamePanel.highScore));
        }
        gamePanel.resetScore();
    }//GEN-LAST:event_PanelStartComponentShown

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

    }//GEN-LAST:event_formComponentShown

    private void loadImages() {
        iconStartH = loadImage("iconStartH");
        iconStart = loadImage("iconStart");
        iconArrowLeft = loadImage("iconArrowLeft");
        iconArrowLeftH = loadImage("iconArrowLeftH");
        iconArrowRight = loadImage("iconArrowRight");
        iconArrowRightH = loadImage("iconArrowRightH");
        iconExit = loadImage("iconExit");
        iconExitH = loadImage("iconExitH");
        iconMinimize = loadImage("iconMinimize");
        iconMinimizeH = loadImage("iconMinimizeH");
        iconBall1 = loadImage("iconBall1");
        iconBall2 = loadImage("iconBall2");
        iconBall3 = loadImage("iconBall3");
        iconBall4 = loadImage("iconBall4");
    }

    private ImageIcon loadImage(String imageName) {
        ImageIcon image = new ImageIcon(getClass().getResource("/images/" + imageName + ".png"));
        return image;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    private void loadListeners() {

        btnStart.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                //Show the name panel
                cardLayout.show(panelWindows, "card3");
                if (difficulty == 0) {
                    gamePanel.ball.SPEED = 10;
                } else if (difficulty == 1) {
                    gamePanel.ball.SPEED = 20;
                } else if (difficulty == 2) {
                    gamePanel.ball.SPEED = 35;
                }
            }

            public void mouseEntered(MouseEvent e) {
                //hover action
                btnStart.setIcon(iconStartH);
            }

            public void mouseExited(MouseEvent e) {
                //hover exit
                btnStart.setIcon(iconStart);
            }
        });

        btnExit.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                System.exit(0);
            }

            public void mouseEntered(MouseEvent e) {
                //hover action
                btnExit.setIcon(iconExitH);
            }

            public void mouseExited(MouseEvent e) {
                //hover exit
                btnExit.setIcon(iconExit);
            }
        });

        btnMinimize.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                setExtendedState(1);
            }

            public void mouseEntered(MouseEvent e) {
                //hover action
                btnMinimize.setIcon(iconMinimizeH);
            }

            public void mouseExited(MouseEvent e) {
                //hover exit
                btnMinimize.setIcon(iconMinimize);
            }
        });
        btnArrowRight.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (difficulty < 2) {
                    difficulty++;
                } else {
                    difficulty = 0;
                }

                switch (difficulty) {
                    case 0:
                        lblDifficulty.setText("Easy");
                        break;
                    case 1:
                        lblDifficulty.setText("Normal");
                        break;
                    case 2:
                        lblDifficulty.setText("Hard");
                        break;
                    default:
                        lblDifficulty.setText("Difficulty set error");
                        break;
                }

            }

            public void mouseEntered(MouseEvent e) {
                //hover action
                btnArrowRight.setIcon(iconArrowRightH);
            }

            public void mouseExited(MouseEvent e) {
                //hover exit
                btnArrowRight.setIcon(iconArrowRight);
            }
        });
        btnArrowLeft.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (difficulty > 0) {
                    difficulty--;
                } else {
                    difficulty = 2;
                }

                switch (difficulty) {
                    case 0:
                        lblDifficulty.setText("Easy");
                        break;
                    case 1:
                        lblDifficulty.setText("Normal");
                        break;
                    case 2:
                        lblDifficulty.setText("Hard");
                        break;
                    default:
                        lblDifficulty.setText("Difficulty set error");
                        break;
                }
            }

            public void mouseEntered(MouseEvent e) {
                //hover action
                btnArrowLeft.setIcon(iconArrowLeftH);
            }

            public void mouseExited(MouseEvent e) {
                //hover exit
                btnArrowLeft.setIcon(iconArrowLeft);
            }
        });
        
        btnArrowRight1.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (iconChoice < 3) {
                    iconChoice++;
                } else {
                    iconChoice = 0;
                }
                
                switch (iconChoice) {
                    case 0:
                        iconAvatar.setIcon(iconBall1);
                        break;
                    case 1:
                        iconAvatar.setIcon(iconBall2);
                        break;
                    case 2:
                        iconAvatar.setIcon(iconBall3);
                        break;
                    case 3:
                        iconAvatar.setIcon(iconBall4);
                        break;
                    default:
                        System.out.println("ERROR AVATAR");
                }

            }

            public void mouseEntered(MouseEvent e) {
                //hover action
                btnArrowRight1.setIcon(iconArrowRightH);
            }

            public void mouseExited(MouseEvent e) {
                //hover exit
                btnArrowRight1.setIcon(iconArrowRight);
            }
        });
        btnArrowLeft1.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (iconChoice > 0) {
                    iconChoice--;
                } else {
                    iconChoice = 3;
                }

                switch (iconChoice) {
                    case 0:
                        iconAvatar.setIcon(iconBall1);
                        break;
                    case 1:
                        iconAvatar.setIcon(iconBall2);
                        break;
                    case 2:
                        iconAvatar.setIcon(iconBall3);
                        break;
                    case 3:
                        iconAvatar.setIcon(iconBall4);
                        break;
                    default:
                        System.out.println("ERROR AVATAR");
                }
            }

            public void mouseEntered(MouseEvent e) {
                //hover action
                btnArrowLeft1.setIcon(iconArrowLeftH);
            }

            public void mouseExited(MouseEvent e) {
                //hover exit
                btnArrowLeft1.setIcon(iconArrowLeft);
            }
        });
        //---DRAG PANEL---
        dragXPos = -1;
        dragYPos = -1;
        dragPanel.addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseDragged(MouseEvent e) {
                if (dragXPos == -1) {
                    dragXPos = e.getX();
                }
                if (dragYPos == -1) {
                    dragYPos = e.getY();
                }
                setLocation(e.getXOnScreen() - dragXPos, e.getYOnScreen() - dragYPos);
            }
        });

        dragPanel.addMouseListener(new MouseAdapter() {
            //Clears the mouse drag position
            public void mouseReleased(MouseEvent e) {
                dragXPos = -1;
                dragYPos = -1;
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelStart;
    private javax.swing.JLabel background;
    private javax.swing.JLabel btnArrowLeft;
    private javax.swing.JLabel btnArrowLeft1;
    private javax.swing.JLabel btnArrowRight;
    private javax.swing.JLabel btnArrowRight1;
    private javax.swing.JLabel btnExit;
    private javax.swing.JLabel btnMinimize;
    private javax.swing.JLabel btnStart;
    private javax.swing.JPanel dragBox;
    private javax.swing.JPanel dragPanel;
    private javax.swing.JLabel iconAvatar;
    private javax.swing.JLabel lblDifficulty;
    private javax.swing.JLabel lblHighScore;
    private javax.swing.JLabel lblHighScore1;
    private javax.swing.JLabel lblHighScoreDisplay;
    public javax.swing.JPanel panelWindows;
    // End of variables declaration//GEN-END:variables
}
